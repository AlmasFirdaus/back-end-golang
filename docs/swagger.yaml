basePath: /api/v1
definitions:
  dtos.ArticleCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully created article
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.ArticleInput:
    properties:
      description:
        type: string
      image:
        type: string
      label:
        type: string
      title:
        type: string
    type: object
  dtos.ArticleResponse:
    properties:
      article_id:
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        type: string
      image:
        type: string
      label:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.ArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully get article
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.BadRequestResponse:
    properties:
      errors: {}
      message:
        example: Bad Request
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  dtos.ForbiddenResponse:
    properties:
      errors: {}
      message:
        example: Forbidden
        type: string
      status_code:
        example: 403
        type: integer
    type: object
  dtos.GetAllArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully get article
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllRecommendationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.RecommendationResponse'
      message:
        example: Successfully get recommendation
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllStationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.StationResponse'
      message:
        example: Successfully get station
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTrainCarriageStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainCarriageResponse'
      message:
        example: Successfully get train peron
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTrainStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponse'
      message:
        example: Successfully get train
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HistorySearchCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HistorySearchResponse'
      message:
        example: Successfully created history search
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.HistorySearchInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dtos.HistorySearchResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  dtos.HistorySearchStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HistorySearchResponse'
      message:
        example: Successfully get history search
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.InternalServerErrorResponse:
    properties:
      errors: {}
      message:
        example: Internal Server Error
        type: string
      status_code:
        example: 500
        type: integer
    type: object
  dtos.NotFoundResponse:
    properties:
      errors: {}
      message:
        example: Not Found
        type: string
      status_code:
        example: 404
        type: integer
    type: object
  dtos.RecommendationCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.RecommendationResponse'
      message:
        example: Successfully created recommendation
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.RecommendationInput:
    properties:
      tag:
        type: string
    type: object
  dtos.RecommendationResponse:
    properties:
      created_at:
        type: string
      recommendation_id:
        type: integer
      tag:
        type: string
      updated_at:
        type: string
    type: object
  dtos.RecommendationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.RecommendationResponse'
      message:
        example: Successfully get recommendation
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StationInput:
    properties:
      initial:
        example: PSE
        type: string
      name:
        example: Pasar Senen
        type: string
      origin:
        example: Jakarta
        type: string
    type: object
  dtos.StationResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      initial:
        example: PSE
        type: string
      name:
        example: Pasar Senen
        type: string
      origin:
        example: Jakarta
        type: string
      station_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.StationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.StationResponse'
      message:
        example: Successfully get station
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StatusOKDeletedResponse:
    properties:
      errors: {}
      message:
        example: Successfully deleted
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TrainCarriageInput:
    properties:
      class:
        example: Ekonomi
        type: string
      name:
        example: Gerbong 1
        type: string
      price:
        example: 50000
        type: integer
      train_id:
        example: 1
        type: integer
    type: object
  dtos.TrainCarriageResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      name:
        example: Gerbong 1
        type: string
      seat:
        items:
          $ref: '#/definitions/dtos.TrainSeatResponse'
        type: array
      train:
        $ref: '#/definitions/dtos.TrainResponse'
      train_carriage_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TrainCarriageStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainCarriageResponse'
      message:
        example: Successfully get train peron
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TrainInput:
    properties:
      code_train:
        example: TRAIN001
        type: string
      name:
        example: Bengawan
        type: string
      route:
        items:
          $ref: '#/definitions/dtos.TrainStationInput'
        type: array
      status:
        example: available
        type: string
    type: object
  dtos.TrainResponse:
    properties:
      class:
        example: Ekonomi
        type: string
      code_train:
        example: TRAIN001
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      name:
        example: Bengawan
        type: string
      price:
        example: 50000
        type: integer
      route:
        items:
          $ref: '#/definitions/dtos.TrainStationResponse'
        type: array
      status:
        example: available
        type: string
      train_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TrainSeatResponse:
    properties:
      name:
        example: A1
        type: string
    type: object
  dtos.TrainStationInput:
    properties:
      arrive_time:
        example: "00:00"
        type: string
      station_id:
        example: 1
        type: integer
    type: object
  dtos.TrainStationResponse:
    properties:
      arrive_time:
        type: string
      station:
        $ref: '#/definitions/dtos.StationInput'
      station_id:
        example: 1
        type: integer
    type: object
  dtos.TrainStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponse'
      message:
        example: Successfully get train
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.UnauthorizedResponse:
    properties:
      errors: {}
      message:
        example: Unauthorized
        type: string
      status_code:
        example: 401
        type: integer
    type: object
  dtos.UserCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInformationResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.UserInformationResponse:
    properties:
      birth_date:
        example: "2002-09-12"
        type: string
      citizen:
        example: Indonesia
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email:
        example: me@hanifz.com
        type: string
      full_name:
        example: Mochammad Hanif
        type: string
      gender:
        example: Laki-Laki
        type: string
      id:
        example: 1
        type: integer
      phone_number:
        example: "0851555555151"
        type: string
      profile_picture_url:
        example: https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg
        type: string
      role:
        example: user
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2ODQ0MDYzMzMsInJvbGUiOiJ1c2VyIiwidXNlcklkIjozfQ.B8vBlMIiU4iZR0YHe4-Mo3DpJ2nwlTV3PuhEJc31pMo
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.UserLoginInput:
    properties:
      email:
        example: me@hanifz.com
        type: string
      password:
        example: qweqwe123
        type: string
    type: object
  dtos.UserRegisterInput:
    properties:
      confirm_password:
        example: qweqwe123
        type: string
      email:
        example: me@hanifz.com
        type: string
      full_name:
        example: Mochammad Hanif
        type: string
      password:
        example: qweqwe123
        type: string
      phone_number:
        example: "0851555555151"
        type: string
      role:
        example: user
        type: string
    type: object
  dtos.UserStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInformationResponse'
      message:
        example: Successfully get user credentials
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.UserUpdateInformationInput:
    properties:
      birth_date:
        example: "2002-09-09"
        type: string
      gender:
        example: Laki-Laki
        type: string
    type: object
  dtos.UserUpdatePasswordInput:
    properties:
      confirm_password:
        example: asdqwe123
        type: string
      new_password:
        example: asdqwe123
        type: string
      old_password:
        example: qweqwe123
        type: string
    type: object
  dtos.UserUpdateProfileInput:
    properties:
      birth_date:
        example: "2000-01-01"
        type: string
      citizen:
        example: Indonesia
        type: string
      full_name:
        example: Hanif Mochammad
        type: string
      phone_number:
        example: "085199999999"
        type: string
    type: object
  helpers.Meta:
    properties:
      current_page:
        example: 1
        type: integer
      next_page: {}
      prev_page:
        example: 1
        type: integer
      total:
        example: 1
        type: integer
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: ec2-3-26-30-178.ap-southeast-2.compute.amazonaws.com:8088
info:
  contact:
    name: Capstone Alterra Group 7
    url: https://github.com/capstone-alterra-group-7
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tripease API Documentation
  version: "1.0"
paths:
  /admin/article:
    get:
      consumes:
      - application/json
      description: Get all articles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all articles
      tags:
      - Admin - Article
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ArticleInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ArticleCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - Admin - Article
    put:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ArticleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update article
      tags:
      - Admin - Article
  /admin/article/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a article
      tags:
      - Admin - Article
    get:
      consumes:
      - application/json
      description: Get article by ID
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get article by ID
      tags:
      - Admin - Article
  /admin/recommendation:
    get:
      consumes:
      - application/json
      description: Get all recommendation
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllRecommendationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all recommendation
      tags:
      - Admin - Recommendation
    post:
      consumes:
      - application/json
      description: Create a new recommendation
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RecommendationInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.RecommendationCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new recommendation
      tags:
      - Admin - Recommendation
  /admin/recommendation/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a recommendation
      parameters:
      - description: ID recommendation
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a recommendation
      tags:
      - Admin - Recommendation
    get:
      consumes:
      - application/json
      description: Get recommendation by ID
      parameters:
      - description: ID recommendation
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RecommendationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get recommendation by ID
      tags:
      - Admin - Recommendation
    put:
      consumes:
      - application/json
      description: Update recommendation
      parameters:
      - description: ID recommendation
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RecommendationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RecommendationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update recommendation
      tags:
      - Admin - Recommendation
  /admin/station:
    get:
      consumes:
      - application/json
      description: Get all stations
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllStationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all stations
      tags:
      - Admin - Station
    post:
      consumes:
      - application/json
      description: Create a new station
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.StationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new station
      tags:
      - Admin - Station
  /admin/station/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a station
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a station
      tags:
      - Admin - Station
    get:
      consumes:
      - application/json
      description: Get station by ID
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get station by ID
      tags:
      - Admin - Station
    put:
      consumes:
      - application/json
      description: Update station
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.StationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update station
      tags:
      - Admin - Station
  /admin/train:
    get:
      consumes:
      - application/json
      description: Get all train
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all train
      tags:
      - Admin - Train
    post:
      consumes:
      - application/json
      description: Create a new train
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new train
      tags:
      - Admin - Train
  /admin/train-carriage:
    get:
      consumes:
      - application/json
      description: Get all train carriage
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all train carriage
      tags:
      - Admin - Train Carriage
    post:
      consumes:
      - application/json
      description: Create a new train carriage
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/dtos.TrainCarriageInput'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new train carriage
      tags:
      - Admin - Train Carriage
  /admin/train-carriage/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a train carriage
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a train carriage
      tags:
      - Admin - Train Carriage
    get:
      consumes:
      - application/json
      description: Get train carriage by ID
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get train carriage by ID
      tags:
      - Admin - Train Carriage
    put:
      consumes:
      - application/json
      description: Update train carriage
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainCarriageInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update train carriage
      tags:
      - Admin - Train Carriage
  /admin/train/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a train
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a train
      tags:
      - Admin - Train
    get:
      consumes:
      - application/json
      description: Get train by ID
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get train by ID
      tags:
      - Admin - Train
    put:
      consumes:
      - application/json
      description: Update train
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update train
      tags:
      - Admin - Train
  /login:
    post:
      consumes:
      - application/json
      description: Login an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Login
      tags:
      - User - Account
  /register:
    post:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Register
      tags:
      - User - Account
  /user:
    get:
      consumes:
      - application/json
      description: User get credentials
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Credentials
      tags:
      - User - Account
  /user/delete-photo-profile:
    delete:
      consumes:
      - application/json
      description: User update an information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Information
      tags:
      - User - Account
  /user/history-search:
    get:
      consumes:
      - application/json
      description: Get all history search
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HistorySearchStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all history search
      tags:
      - User - History Search
    post:
      consumes:
      - application/json
      description: Create a new history search
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HistorySearchInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.HistorySearchCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new history search
      tags:
      - User - History Search
  /user/history-search/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a history search
      parameters:
      - description: ID history search
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a history search
      tags:
      - User - History Search
  /user/train/search:
    get:
      consumes:
      - application/json
      description: Search Train
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Station origin id
        in: query
        name: station_origin_id
        required: true
        type: integer
      - description: Station destination id
        in: query
        name: station_destination_id
        required: true
        type: integer
      - description: Filter by train id
        in: query
        name: sort_by_train_id
        type: integer
      - description: Filter by class name
        in: query
        name: sort_by_class
        type: string
      - description: Filter by price
        in: query
        name: sort_by_price
        type: string
      - description: Filter by arrive time
        in: query
        name: sort_by_arrive_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Search Train Available
      tags:
      - User - Train
  /user/update-information:
    patch:
      consumes:
      - application/json
      description: User update an information
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdateInformationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Information
      tags:
      - User - Account
  /user/update-password:
    put:
      consumes:
      - application/json
      description: User update an password
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Password
      tags:
      - User - Account
  /user/update-photo-profile:
    put:
      consumes:
      - application/json
      description: User update an photo profile
      parameters:
      - description: Photo file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Photo Profile
      tags:
      - User - Account
  /user/update-profile:
    put:
      consumes:
      - application/json
      description: User update an profile
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdateProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Profile
      tags:
      - User - Account
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
